{"version":3,"sources":["index.tsx"],"names":["canvas","createStage","getCanvas","viewport","createViewport","inputHandler","createViewportAwareInputHandler","store","x","y","score","Realscore","init","a","gl","getContext","camera","getCamera","batch","createBatch","whiteTex","createWhiteTexture","loadTexture","moleImg","number1","number2","number3","number4","number5","number6","number7","number8","number9","number0","background","loadAtlas","mainAtlas","findRegion","moles","accumulate","signal","clearColor","createGameLoop","delta","push","x1","Math","random","clear","COLOR_BUFFER_BIT","setProjection","combined","begin","draw","mole","setTimeout","splice","i","toString","length","setColor","end","window","addEventListener","e","targetY","getTouchedWorldCoord","targetX","console","log","touchX","touches","screenX","touchY","screenY"],"mappings":"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","file":"static/js/main.db7b7029.chunk.js","sourcesContent":["import './index.css';\nimport {\n  createAnimation,\n  createBatch,\n  createGameLoop,\n  createStage,\n  createViewport,\n  createViewportAwareInputHandler,\n  createWhiteTexture,\n  loadAtlas,\n  loadTexture,\n  PlayMode,\n  Vector2\n} from 'gdxjs';\nimport { time } from 'console';\n\n// WebGL\nconst stage = createStage();\nconst canvas = stage.getCanvas();\nconst viewport = createViewport(canvas, 50, 100);\nlet count = 0\nconst inputHandler = createViewportAwareInputHandler(canvas, viewport);\nlet store = {\n  x: 5,\n  y: 5\n}\nlet score = 0;\nlet Realscore = \"\";\n\nconst init = async () => {\n  // const stage = createStage();\n  // const canvas = stage.getCanvas();\n\n  // const viewport = createViewport(canvas, 50, 100);\n\n  const gl = viewport.getContext();\n  const camera = viewport.getCamera();\n\n\n\n  const batch = createBatch(gl);\n  const whiteTex = createWhiteTexture(gl);\n  const moleImg = await loadTexture(gl, './mole.png');\n  const number1 = await loadTexture(gl, './1.png');\n  const number2 = await loadTexture(gl, './2.png');\n  const number3 = await loadTexture(gl, './3.png');\n  const number4 = await loadTexture(gl, './4.png');\n  const number5 = await loadTexture(gl, './5.png');\n  const number6 = await loadTexture(gl, './6.png');\n  const number7 = await loadTexture(gl, './7.png');\n  const number8 = await loadTexture(gl, './8.png');\n  const number9 = await loadTexture(gl, './9.png');\n  const number0 = await loadTexture(gl, './0.png');\n  const scoreImg = await loadTexture(gl, './score.png');\n\n\n  const background = await loadTexture(gl, './background.png');\n  const mainAtlas = await loadAtlas(gl, './main.atlas', {});\n  const runRegion = mainAtlas.findRegion('boss_attack', 6);\n\n\n  const moles: { x1: number; y: number }[] = [];\n  let indexMemo = 0;\n  let indexMole = 0;\n  const DROP_RATE = 4;\n  let accumulate = 0;//?\n  const mole_SIZE = 10;\n\n  let oldstore = {\n    x: 0,\n    y: 0\n  }\n  let signal = 1\n  let drawSignal = 0;\n  let stateTime = 0;//?\n  let accumulateScore = 0;\n  gl.clearColor(0, 0, 0, 1);\n  createGameLoop(delta => {\n\n    accumulate += delta;\n\n\n    if (accumulate > DROP_RATE) {\n      accumulate = 0;\n\n      moles.push({\n        x1: Math.random() * 50,\n        y: 15 / Math.random(),\n\n\n      });\n\n      signal = 0\n\n\n    }\n    // for (let mole of moles) {\n    //   let index = moles.indexOf(mole)\n    //   if (mole.x1 <= 5 ||\n    //     mole.y >= 90 ||\n    //     mole.x1 >= 40 ||\n    //     mole.y <= 10) {\n    //     moles.splice(index, 1)\n\n    //   }\n    // }\n\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    batch.setProjection(camera.combined);\n    batch.begin();\n    batch.draw(whiteTex, 0, 0, 50, 100);\n    batch.draw(background, 0, 0, 50, 100);\n\n    for (let mole of moles) {\n      batch.draw(\n        moleImg,\n        mole.x1,\n        mole.y,\n        mole_SIZE,\n        mole_SIZE\n      );\n      if (signal == 0) {\n        store.x = mole.x1\n        store.y = mole.y\n        signal = 1\n      }\n\n\n      setTimeout(function () {\n\n\n        moles.splice(0, 1)\n\n\n      }, 2000)\n    }\n\n\n\n\n\n\n\n    indexMemo = 1;\n\n    // batch.draw(scoreImg, 2, 0, 10, 10)\n    Realscore = score.toString();\n    for (var i = Realscore.length - 1; i >= 0; i--) {\n      switch (Realscore[i]) {\n        case \"0\":\n          batch.draw(number0, 10 + 2 * i, 0, 2, 2)\n          break;\n        case \"1\":\n          batch.draw(number1, 10 + 2 * i, 0, 2, 2)\n          break;\n        case \"2\":\n          batch.draw(number2, 10 + 2 * i, 0, 2, 2)\n          break;\n        case \"3\":\n          batch.draw(number3, 10 + 2 * i, 0, 2, 2)\n          break;\n        case \"4\":\n          batch.draw(number4, 10 + 2 * i, 0, 2, 2)\n          break;\n        case \"5\":\n          batch.draw(number5, 10 + 2 * i, 0, 2, 2)\n          break;\n        case \"6\":\n          batch.draw(number6, 10 + 2 * i, 0, 2, 2)\n          break;\n        case \"7\":\n          batch.draw(number7, 10 + 2 * i, 0, 2, 2)\n          break;\n        case \"8\":\n          batch.draw(number8, 10 + 2 * i, 0, 2, 2)\n          break;\n        case \"9\":\n          batch.draw(number9, 10 + 2 * i, 0, 2, 2)\n          break;\n\n      }\n\n    }\n\n\n\n\n\n\n    batch.setColor(0.4, 0.4, 0.4, 1);\n\n    batch.setColor(1, 1, 1, 1);\n\n    stateTime += delta;\n\n\n    batch.end();\n\n\n\n\n\n\n  });\n\n};\n\n\nwindow.addEventListener(\"click\", function (e) {\n\n  let targetY = inputHandler.getTouchedWorldCoord().y;\n  const targetX = inputHandler.getTouchedWorldCoord().x;\n\n\n  if (targetX <= store.x + 6 &&\n    targetX >= store.x + 2.7 &&\n    targetY >= store.y + 1.5 &&\n    targetY <= store.y + 5.2\n  ) {\n    score++\n    console.log(score)\n\n    store.x = 3\n    store.y = 3\n\n  }\n\n\n\n})\n\nwindow.addEventListener(\"touchstart\", function (e) {\n  let targetY = inputHandler.getTouchedWorldCoord().y;\n  const targetX = inputHandler.getTouchedWorldCoord().x;\n  let touchX = e.touches[0].screenX\n  let touchY = e.touches[0].screenY\n  touchX = targetX\n  touchY = targetY\n\n\n  if (touchX <= store.x + 6 &&\n    touchX >= store.x + 2.7 &&\n    touchY >= store.y + 1.5 &&\n    touchY <= store.y + 5.2\n  ) {\n    score++\n    console.log(score)\n\n    store.x = 3\n    store.y = 3\n\n  }\n\n})\n\ninit();\n\n/**\n * 1. Typescript\n * 2. WebGL\n * 3. Async/await, promise\n */\n"],"sourceRoot":""}